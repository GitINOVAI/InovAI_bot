import logging
import re
import time

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
# set higher logging level for httpx to avoid all GET and POST requests being logged
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

valid_codes =  # Example valid codes

# Dictionary to store addresses and their last usage timestamps
address_last_used = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /start is issued."""
    user = update.effective_user
    keyboard = [[InlineKeyboardButton("Connect Wallet", callback_data='connect_wallet')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_html(
        rf"Hallo {user.mention_html()} please send your Ethereum wallet address",
        reply_markup=reply_markup
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /help is issued."""
    await update.message.reply_text("Please DM @administrator for help")


async def connect_wallet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the connect wallet callback query."""
    query = update.callback_query
    query.answer()
    await query.message.reply_text("Please provide your Ethereum wallet address.")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Echo the user message."""
    user_input = update.message.text.strip()
    if re.match(r"^0x[a-fA-F0-9]{40}$", user_input):  # Check if input is a valid Ethereum address
        if user_input in valid_codes:
            # Check if the address has been used within the last 4 hours
            if user_input in address_last_used:
                last_used_time = address_last_used[user_input]
                current_time = time.time()
                if current_time - last_used_time < 4 * 60 * 60:  # 4 hours in seconds
                    await update.message.reply_text("Sorry, this address has already been used recently. Please try again later.")
                    return

            # Grant access and update last usage timestamp
            address_last_used[user_input] = time.time()

            await update.message.reply_text
        else:
            await update.message.reply_text("Sorry, you are not eligible to get INOVAI VM access")
    else:
        await update.message.reply_text("Sorry, you did not enter a valid Ethereum address.")


def main() -> None:
    """Start the bot."""
    # Create the Application and pass it your bot's token.
    application = Application.builder().token("").build()

    # on different commands - answer in Telegram
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    # on non command i.e message - check for valid code
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # Add handler for inline keyboard button
    application.add_handler(CallbackQueryHandler(connect_wallet, pattern='^connect_wallet$'))

    # Run the bot until the user presses Ctrl-C
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
